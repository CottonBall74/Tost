// the parser is responsible for parsing the tokens generated by the lexer
// and creating an abstract syntax tree (AST) from them.

// The AST is a tree-like data structure that represents the structure of the source code.
// The parser will use the tokens generated by the lexer to build this tree,
// which will then be used by the interpreter to execute the program.

#pragma once

#include "laxer.hpp"


namespace Tost
{
    class Parser
    {
    public:
        Parser(Lexer& lexer);
        void parser();

    private:
        Laxer& m_lexer;
        Token m_currentToken;

        void advance();
        void eat(TokenType type);
        void error(const std::string& message);

        // grammar rules
        void statement();
        void conditionalStatement();
        void loopStatement();
        void expression();
        void term();
        void factor();
    };
}